# Generated by Django 2.2.20 on 2021-06-05 16:06

import bson.objectid
from django.db import migrations, models
import djongo.models.fields
import pendulum
import rcvserver.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Ballot',
            fields=[
                ('id', models.CharField(default=bson.objectid.ObjectId, max_length=24, primary_key=True, serialize=False)),
                ('user', djongo.models.fields.EmbeddedField(model_container=rcvserver.models.User, null=True)),
                ('name', models.CharField(max_length=40)),
                ('public', models.BooleanField(default=False)),
                ('context', djongo.models.fields.DictField(default={})),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.CharField(default=bson.objectid.ObjectId, max_length=24, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('description', models.CharField(max_length=500)),
                ('creator', djongo.models.fields.EmbeddedField(default=rcvserver.models.User, model_container=rcvserver.models.User, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', djongo.models.fields.ObjectIdField(auto_created=True, default=bson.objectid.ObjectId, primary_key=True, serialize=False)),
                ('creator', djongo.models.fields.EmbeddedField(default=rcvserver.models.User, model_container=rcvserver.models.User, null=True)),
                ('created', models.DateTimeField(default=pendulum.now)),
                ('updated', models.DateTimeField(default=pendulum.now)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=500)),
                ('type', models.CharField(choices=[('classic_rcv', 'Classic RCV / IRV'), ('fptp', 'Single-Choice Popular Vote'), ('ranked_cumulative_approval', 'Ranked Cumulative Approval (Bucklin)'), ('star_vote', 'Score Then Automatic Runoff (STAR)')], max_length=20)),
                ('public', models.BooleanField(default=False)),
                ('public_ballots', models.CharField(choices=[('yes', 'yes'), ('no', 'no'), ('maybe', 'maybe')], default='maybe', max_length=5)),
                ('public_results', models.CharField(choices=[('always', 'always'), ('voting', 'voting'), ('closed', 'closed'), ('never', 'never')], default='always', max_length=6)),
                ('multi_ballots_per_user', models.BooleanField(default=True)),
                ('locked', models.BooleanField(default=False)),
                ('randomize_choices', models.BooleanField(default=True)),
                ('limit_rank_choices', models.IntegerField(default=None)),
                ('limit_choices_added', models.IntegerField(default=None)),
                ('ballot_start', models.IntegerField(default=None)),
                ('ballot_end', models.IntegerField(default=None)),
                ('choices', djongo.models.fields.ArrayField(default=[], model_container=rcvserver.models.Choice)),
                ('ballots', djongo.models.fields.ArrayField(default=[], model_container=rcvserver.models.Ballot)),
                ('results', djongo.models.fields.EmbeddedField(default=rcvserver.models.Result, model_container=rcvserver.models.Result, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.CharField(default=bson.objectid.ObjectId, max_length=24, primary_key=True, serialize=False)),
                ('fptp_result', djongo.models.fields.DictField(default={})),
                ('rcv_result', djongo.models.fields.DictField(default={})),
                ('rca_result', djongo.models.fields.DictField(default={})),
                ('star_result', djongo.models.fields.DictField(default={})),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.CharField(default=bson.objectid.ObjectId, max_length=24, primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=40)),
                ('session_id', models.CharField(max_length=40)),
            ],
        ),
    ]
